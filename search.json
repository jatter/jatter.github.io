[{"title":"公司注册流程","url":"%2F2019%2F05%2F15%2F%E5%85%AC%E5%8F%B8%E6%B3%A8%E5%86%8C%E6%B5%81%E7%A8%8B%2F","content":"\n# 公司注册流程\n初注册公司,不明白要做哪些准备，走什么流程，只能各种网找或咨询“老鸟”，磕磕碰碰折腾几天才弄得差不多,特总结记录一下。\n### 一:定义公司经营范围\n一般可从[启信宝](https://www.qixin.com \"启信宝\")等平台拷贝已注册相关大公司的经营范围，微调即可。\n经营范围：互联网络技术开发及应用；技术开发、技术咨询、技术转让、技术服务，软件开发与销售..。\n\n### 二:公司起名\n公司起名看似可以随性，实则还需花一定精力时间琢磨，大部分好点的名称都已被注册，最好得有含义，好记，和公司业务相关，后续各好推广一些，\n是否重名也只在[启信宝](https://www.qixin.com \"启信宝\")中查询。\n网络科技：*信，*讯较多，教育行业:博,思较多。\n规则可参考：简短明快,朗朗上口,文化底蕴,避免重名.\n<!--more-->\n\n### 三:提交注册\n如已有办公场地，一般找相关财务人员都能注册；如无找第三方注册公司帮忙注册。费用一般就1000多。提供法人，财务，监事人员的身分证复印件。\n\n### 四:后续相关资质证件\n如电商多商户入驻，涉及资金结算方面需办增值电信业务许可证(ICP)，费用一般5000左右（需有文网文才可以办）。\n办理企业对公帐号。\n公司网站域名申请，备案。\n购买相关服务器等。\n","tags":["公司注册"]},{"title":"系统常用脚本汇总","url":"%2F2019%2F04%2F29%2F%E7%B3%BB%E7%BB%9F%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC%E6%B1%87%E6%80%BB%2F","content":"\n\n### 一:清理系统脚本\n<!--more-->\n```dos\n@echo off\n\necho 正在清除系统垃圾文件，请稍等......\n\ndel /f /s /q  %systemdrive%\\*.tmp\n\ndel /f /s /q  %systemdrive%\\*._mp\n\ndel /f /s /q  %systemdrive%\\*.log\n\ndel /f /s /q  %systemdrive%\\*.gid\n\ndel /f /s /q  %systemdrive%\\*.chk\n\ndel /f /s /q  %systemdrive%\\*.old\n\ndel /f /s /q  %systemdrive%\\recycled\\*.*\n\ndel /f /s /q  %windir%\\*.bak\n\ndel /f /s /q  %windir%\\prefetch\\*.*\n\nrd /s /q %windir%\\temp & md  %windir%\\temp\n\ndel /f /q  %userprofile%\\cookies\\*.*\n\ndel /f /q  %userprofile%\\recent\\*.*\n\ndel /f /s /q  \"%userprofile%\\Local Settings\\Temporary Internet Files\\*.*\"\n\ndel /f /s /q  \"%userprofile%\\Local Settings\\Temp\\*.*\"\n\ndel /f /s /q  \"%userprofile%\\recent\\*.*\"\n\necho 清除系统LJ完成！\n\necho. & pause\n```","tags":["system"]},{"title":"hexo使用笔记","url":"%2F2019%2F04%2F29%2Fhexo%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0%2F","content":"\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!--more-->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","tags":["hexo"]},{"title":"window-wget工具使用","url":"%2F2019%2F04%2F29%2Fwindow-wget%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%2F","content":"\n\n### 一:下载安装wget\n   下载地址:[https://pan.baidu.com/s/1BFbcdcQBclWtz9RTnKB7hw](https://pan.baidu.com/s/1BFbcdcQBclWtz9RTnKB7hw) (提取码:u5ug)\n   \n<!--more-->\n### 二:通过wget下载且解压rar文件\n\n```dos\n@echo off\n:: 下载日志日期\nset logDate=2019-03-07\n:: 下载日志小时段,01表示01:00:00 -- 01:59:59\nset logHour=11\nset curDir=%cd%\nset downDir=%curDir%\\%logDate%\n\ndel /s /q \"%downDir%\"\nmd  \"%downDir%\"\n\nwget -P %downDir%\\10.5.28.212 http://finance-njyh-04.xxxxxx.com/%logDate%/xxx/10.5.28.212/WildFly/yewu/xxx-biz.%logDate%-%logHour%.log.gz\necho 10.5.28.212下载完成\nwget -P %downDir%\\10.5.28.213 http://finance-njyh-04.xxxxxx.com/%logDate%/xxx/10.5.28.213/WildFly/yewu/xxx-biz.%logDate%-%logHour%.log.gz\necho 10.5.28.213下载完成\nwget -P %downDir%\\10.5.28.214 http://finance-njyh-04.xxxxxx.com/%logDate%/xxx/10.5.28.214/WildFly/yewu/xxx-biz.%logDate%-%logHour%.log.gz\necho 10.5.28.214下载完成\nwget -P %downDir%\\10.5.28.215 http://finance-njyh-04.xxxxxx.com/%logDate%/xxx/10.5.28.215/WildFly/yewu/xxx-biz.%logDate%-%logHour%.log.gz\necho 10.5.28.215下载完成\nwget -P %downDir%\\10.5.28.216 http://finance-njyh-04.xxxxxx.com/%logDate%/xxx/10.5.28.216/WildFly/yewu/xxx-biz.%logDate%-%logHour%.log.gz\necho 10.5.28.216下载完成\nwget -P %downDir%\\10.5.28.217 http://finance-njyh-04.xxxxxx.com/%logDate%/xxx/10.5.28.217/WildFly/yewu/xxx-biz.%logDate%-%logHour%.log.gz\necho 10.5.28.217下载完成\nwget -P %downDir%\\10.5.28.218 http://finance-njyh-04.xxxxxx.com/%logDate%/xxx/10.5.28.218/WildFly/yewu/xxx-biz.%logDate%-%logHour%.log.gz\necho 10.5.28.218下载完成\nwget -P %downDir%\\10.5.28.219 http://finance-njyh-04.xxxxxx.com/%logDate%/xxx/10.5.28.219/WildFly/yewu/xxx-biz.%logDate%-%logHour%.log.gz\necho 10.5.28.219下载完成\n\necho 开始解压\nstart winrar x -ibck %downDir%\\10.5.28.212\\xxx-biz.%logDate%-%logHour%.log.gz %downDir%\\10.5.28.212\\\nstart winrar x -ibck %downDir%\\10.5.28.213\\xxx-biz.%logDate%-%logHour%.log.gz %downDir%\\10.5.28.213\\\nstart winrar x -ibck %downDir%\\10.5.28.214\\xxx-biz.%logDate%-%logHour%.log.gz %downDir%\\10.5.28.214\\\nstart winrar x -ibck %downDir%\\10.5.28.215\\xxx-biz.%logDate%-%logHour%.log.gz %downDir%\\10.5.28.215\\\nstart winrar x -ibck %downDir%\\10.5.28.216\\xxx-biz.%logDate%-%logHour%.log.gz %downDir%\\10.5.28.216\\\nstart winrar x -ibck %downDir%\\10.5.28.217\\xxx-biz.%logDate%-%logHour%.log.gz %downDir%\\10.5.28.217\\\nstart winrar x -ibck %downDir%\\10.5.28.218\\xxx-biz.%logDate%-%logHour%.log.gz %downDir%\\10.5.28.218\\\nstart winrar x -ibck %downDir%\\10.5.28.219\\xxx-biz.%logDate%-%logHour%.log.gz %downDir%\\10.5.28.219\\\necho 解压完成\n```\n\n### 三：wget参数说明\n\n```dos\n\n命令如下：\nwget -r -p -k -np -nc -e robots=off http://www.example.com/mydir/\n如果要想下载整个网站，最好去除-np参数。   \nwget -r -p -k -nc -e robots=off http://www.example.com/mydir/\n \n-r 递归；对于HTTP主机，wget首先下载URL指定的文件，然后（如果该文件是一个HTML文档的话）递归下载该文件所引用（超级连接）的所有文件（递 归深度由参数-l指定）。对FTP主机，该参数意味着要下载URL指定的目录中的所有文件，递归方法与HTTP主机类似。   \n-c 指定断点续传功能。实际上，wget默认具有断点续传功能，只有当你使用别的ftp工具下载了某一文件的一部分，并希望wget接着完成此工作的时候，才 需要指定此参数。\n \n-nc 不下载已经存在的文件\n-np 表示不追溯至父目录，不跟随链接，只下载指定目录及子目录里的东西；\n-p 下载页面显示所需的所有文件。比如页面中包含了图片，但是图片并不在/yourdir目录中，而在/images目录下，有此参数，图片依然会被正常下 载。\n \n-k 修复下载文件中的绝对连接为相对连接，这样方便本地阅读。\n-o down.log 记录日记到down.log\n-e robots=off 忽略robots.txt\n```\n\n### 四:通过wget下载http整个网站\n\n```dos\nwget -r -p -k -np -nc -e robots=off http://wiki.cnsuning.com/display/ENJOY/Home\n```\n\n### 五:通过wget下载https整个网站\n加上 --no-check-certificate  选项，忽略证书检查，如下\n\n```dos\nwget -r -p -k -np -nc -e robots=off --no-check-certificate http://www.cnblogs.com/moonandstar08\n```\n\n参考：[https://www.cnblogs.com/hzdx/p/6432161.html](https://www.cnblogs.com/hzdx/p/6432161.html)\n","tags":["wget"]},{"title":"开发常用脚本汇总","url":"%2F2019%2F04%2F29%2F%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC%E6%B1%87%E6%80%BB%2F","content":"\n### 一:终止java进程\n<!--more-->\n\n```dos\n@echo off\necho 开始终止java进程\ntaskkill /f /t /im java.exe\necho 终止java进程完成\n::taskkill /im java.exe /f\n```\n","tags":["script"]},{"title":"基于vue3.0实现后台管理模板","url":"%2F2019%2F04%2F29%2F%E5%9F%BA%E4%BA%8Evue3-0%E5%AE%9E%E7%8E%B0%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E6%A8%A1%E6%9D%BF%2F","content":"\n> 通过自己所学的vue知识，从0开始自己搭建的一个关于后台管理的模板界面，有时间就会更新新的内容，实现一些常用的功能，\n> 使用vue最新脚手架搭建环境，编写界面，使用axios请求接口，渲染界面,实现页面登录注册，数据的增删改查,数据部分存储到easy-mock数据中。\n<!--more-->\n## 项目结构\n```\n  |——— client  #vue项目入口文件\n\t|——— config  #秘钥配置文件\n\t|——— node_modules #一些常用安装的依赖\n\t|——— models #接口模型\n\t|——— router       #接口文档\n\t|——— package.json #项目配置文件\n\t|___ README.md    #项目的说明文档，markdown 格式\n```\n## 相关技术\n\t1. vuejs2.0：一套构建用户界面的渐进式框架，易用、灵活、高效。\n\t2. vue-router：官方的路由组件，配合vue.js创建单页应用（SPA）非常简单。\n\t3. axios: 基于 Promise 的 HTTP 请求客户端，可同时在浏览器和 node.js 中使用。\n\t\n## 功能介绍\n\t- Element-ui\n\t- 请求拦截和响应拦截\n\t- 富文本编辑器\n\t- Markdown编辑器\n\t- Echarts\n\t- tab数据切换\n\t- token本地存储\n\t- 表单\n\t- 高德地图引入\n\t- 登录注册\n\t- 路由守卫\n\t- vuex存储\n\t- 数据分页和查询\n\t- Excel表格导出\n\t- 递归组件\n\t- 主题更换\n\t- 404\n\n## 项目编译和运行\n  + 可以直接在git上下载项目源码。把github下载到本地，\n\t\tgit clone [](https://github.com/MrZHLF/vue-admin.git)\n\t+ 进入node-api-element当前页面初始化\n\t\tcnpm install\n\t+ 进入client项目目录中\n\t\tcnpm install\n  + 所有依赖安装成功后执行启动命令在当前目录启动,不要在client进行启动，已经配置好前后端联调\n\t  npm run dev \n\t  如果显示一下内容说明安装成功\n\t  I  Your application is running here: http://localhost:8080\n\t\t\n## 成果展示\n ![avatar](./img/1.png)\n ![avatar](./img/2.png)\n ![avatar](./img/3.png)\n \n ![avatar](./img/4.gif)\n更新中...","tags":["前端"]},{"title":"基于spring,mybatis,mysql的通用增删查改","url":"%2F2019%2F04%2F29%2F%E5%9F%BA%E4%BA%8Espring-mybatis-mysql%E7%9A%84%E9%80%9A%E7%94%A8%E5%A2%9E%E5%88%A0%E6%9F%A5%E6%94%B9%2F","content":"\n# 通用增删查改实现\n<!--more-->\n### 一:controller层\n\n```java\n\n\n/**\n * 〈一句话功能简述〉<br>\n * 〈功能详细描述〉\n *\n * @author \n * @see [相关类/方法]（可选）\n * @since [产品/模块版本] （可选）\n */\n@Controller\n@RequestMapping(\"/commDataHandle\")\npublic class CommDataHandleBaseController extends BaseController {\n    /**\n     * 日志打印\n     */\n    private static final Logger logger = LoggerFactory.getLogger(CommDataHandleBaseController.class);\n    @Autowired\n    ICommDataHandleService commDataHandleService;\n    \n    /**\n\t * \n\t * 功能描述: <br>\n\t * 〈单表或批量查询,返回结果数及结果列表 〉\n\t * 数据格式:\n\t * 输入参数:rid：预留字段，暂且可不填;odata为操作列表;tname：为操作的表名或mybatis的sql编号;ttype：表类型, M：mybatis,S：SQL,T：Table,V:View\n\t *        otype:操作类型 I:插入 S：查询  U：更新 D:删除 C:统计    tdata：查询条件键值对, 键前可通过[]定义数据类型,类型有:\n\t *        I:Integer类型,TS:Timestamp类型,T:Date类型,D:Double类型,L:LONG类型;BD:BigDecimal类型,LS:Arrays类型\n     * 单表查询参数如: {\"rid\":\"10001\",\"odata\":{\"tname\":\"repayment.schedule.queryDueLoanPlanListForParams\",\n     *              \"ttype\":\"M\",\"otype\":\"S\",\"tdata\":{\"[T]repayInteDate\":\"2018-05-26\"}}}\n     * 多表查询参数如: {\"rid\":\"10001\",\"olist\":[\n     *  {\"tname\":\"repayment.schedule.queryDueLoanPlanListForParams\",\"ttype\":\"M\",\"otype\":\"S\",\"tdata\":{\"[T]repayInteDate\":\"2018-05-26\"}},\n     *  {\"tname\":\"admin.loan.main.queryLoanMainByLoanNo\",\"ttype\":\"M\",\"otype\":\"S\",\"tdata\":{\"loanNo\":\"PFD20170616000387\"}},\n     *  {\"tname\":\"admin.loan.main.queryLoanMainByFlowId\",\"ttype\":\"M\",\"otype\":\"S\",\"tdata\":{\"flowId\":\"ecps20170620000009974\"}}\n     *  ]}; \n     *                   \n\t * 输出参数: flag: S(成功); F(失败); data:结果集列表(包括结果数，结果列表) msg: 成功,失败\n\t * 返回结果如:\n\t *      {\"flag\":\"S\",\"data\":{\"repayment.schedule.queryDueLoanPlanListForParamsTotalNum\":4,\n\t *      \"repayment.schedule.queryDueLoanPlanListForParamsDataList\":[{\"acctFlag\":\"\",\"acctNo\":\"JYD180920000384\",\"balance\":460.36}]}};   \n\t * \n\t * 实例：\n\t * //单表查询条件   \n     * //var param ={\"rid\":\"10001\",\"odata\":{\"tname\":\"system.activiti.getTaskCommentlist\",\"ttype\":\"M\",\"otype\":\"S\",\"tdata\":{\"instanceId\":\"99901\"}}};\n     * //多表查询条件\n     *  var param ={\"rid\":\"10001\",\"olist\":[{\"tname\":\"repayment.schedule.queryDueLoanPlanListForParams\",\"ttype\":\"M\",\"otype\":\"S\",\"tdata\":{\"[T]repayInteDate\":\"2018-05-26\"}},\n     *  {\"tname\":\"admin.loan.main.queryLoanMainByLoanNo\",\"tdata\":{\"loanNo\":\"PFD20170616000387\"}},\n     *  {\"tname\":\"admin.loan.main.queryLoanMainByFlowId\",\"tdata\":{\"flowId\":\"ecps20170620000009974\"}}\n     *  ]};\n     *  \n     *  $.ajax({\n     *          url: JS_WEB_ROOT+'/commDataHandle/query.do',\n     *          type:'POST',\n     *          data:{'jsonParams':JSON.stringify(param)},\n     *          dataType : \"json\",\n     *          async : false,\n     *          success:function(root){  \n     *              console.log(JSON.stringify(root));\n     *          },error:function(root){\n     *              alert('保存失败');\n     *              alert(root.result);\n     *          }\n     *      });\n\t * @see [相关类/方法](可选)\n\t * @since [产品/模块版本](可选)\n\t */\n    @RequestMapping(\"/query.do\")\n    public void query(HttpServletResponse response, HttpServletRequest request) {\n    \tString jsonParams = request.getParameter(\"jsonParams\");\n    \tlogger.debug(\"query jsonParams{}\", jsonParams);\n    \tMap<String, Object> paramMap = UtilValidate.isNotEmpty(jsonParams) ? \n    \t        JSONUtil.json2Map(jsonParams): new HashMap<String, Object>();\t\n    \tMap<String, Object> responseMap = new HashMap<String, Object>(); \t\n        //String rid =  UtilValidate.isNotEmpty(jsonObject.get(\"rid\")) ? jsonObject.get(\"rid\").toString() : \"\";\n        //String odata =  UtilValidate.isNotEmpty(jsonObject.get(\"odata\")) ? jsonObject.get(\"odata\").toString() : \"\";\n    \tresponseMap = commDataHandleService.executeQuery(paramMap);\n\t   \n    \tresponseJson(response, responseMap);\n    \t\n    }\n    \n    /**\n\t * \n\t * 功能描述: <br>\n\t * 〈单表或批量修改,返回结果〉\n\t * 数据格式:\n     * 输入参数:\n\t * 新增:  {\"rid\":\"10001\",\"odata\":{\"tname\":\"system.activiti.insertComment\",\"ttype\":\"M\",\"otype\":\"I\",\n\t * \"tdata\":{\"actCommentId\":\"888888\",\"content\":\"888888\",\"status\":\"2\"}}}\n\t * \n\t * 修改:  {\"rid\":\"10001\",\"odata\":{\"tname\":\"system.activiti.updateComment\",\"ttype\":\"M\",\"otype\":\"U\",\n\t * \"tdata\":{\"actCommentId\":\"888888\",\"content\":\"888888\",\"status\":\"2\"}}}\n\t * \n     * 删除:  {\"rid\":\"10001\",\"odata\":{\"tname\":\"system.activiti.updateComment\",\"ttype\":\"M\",\"otype\":\"D\",\n     * \"tdata\":{\"actCommentId\":\"888888\",\"content\":\"888888\",\"status\":\"2\"}}} \n     * \n     * 输出参数: flag: S(成功); F(失败); data:结果集列表(包括结果数) msg: 成功,失败\n     * 返回结果如:\n     *    {\"flag\":\"S\",\"data\":{\"system.activiti.insertCommentTotalNum\":1}\n     *    \n     * 实例:\n     * //单表插入\n     *  //var param ={\"rid\":\"10001\",\"odata\":{\"tname\":\"system.activiti.insertComment\",\"ttype\":\"M\",\"otype\":\"I\",\"tdata\":{\"actCommentId\":\"777777\",\"content\":\"777777\",\"status\":\"22\"}}};\n     *  //单表修改\n     *  //var param ={\"rid\":\"10001\",\"odata\":{\"tname\":\"system.activiti.updateComment\",\"ttype\":\"M\",\"otype\":\"U\",\"tdata\":{\"actCommentId\":\"777777\",\"content\":\"777777\",\"status\":\"55\"}}};\n     *  //单表删除\n     *  //var param ={\"rid\":\"10001\",\"odata\":{\"tname\":\"system.activiti.deleteById\",\"ttype\":\"M\",\"otype\":\"D\",\"tdata\":{\"id\":\"25963\"}}};\n     *  //多表增删查改\n     *  \n     *  var param ={\"rid\":\"10001\",\"olist\":[{\"tname\":\"system.activiti.insertComment\",\"ttype\":\"M\",\"otype\":\"I\",\"tdata\":{\"actCommentId\":\"777777\",\"content\":\"777777\",\"status\":\"22\"}},\n     *  {\"tname\":\"system.activiti.updateComment\",\"ttype\":\"M\",\"otype\":\"U\",\"tdata\":{\"actCommentId\":\"666666\",\"content\":\"666666\",\"status\":\"55\"}},\n     *  {\"tname\":\"system.activiti.deleteById\",\"ttype\":\"M\",\"otype\":\"D\",\"tdata\":{\"id\":\"23776\"}}\n     *  ]};\n     *   \n     *    \n     *    $.ajax({\n     *           url: JS_WEB_ROOT+'/commDataHandle/update.do',\n     *           type:'POST',\n     *           data:{'jsonParams':JSON.stringify(param)},\n     *           dataType : \"json\",\n     *           async : false,\n     *           success:function(root){  \n     *               console.log(JSON.stringify(root));\n     *           },error:function(root){\n     *               alert('保存失败');\n     *               alert(root.result);\n     *           }\n     *       });\n     *  \n     *    \n\t * @see [相关类/方法](可选)\n\t * @since [产品/模块版本](可选)\n\t */\n    @RequestMapping(\"/update.do\")\n    public void update(HttpServletResponse response, HttpServletRequest request) {\n    \tString jsonParams = request.getParameter(\"jsonParams\");\n    \tlogger.debug(\"update jsonParams{}\", jsonParams);\n    \tMap<String, Object> paramMap = UtilValidate.isNotEmpty(jsonParams) ? \n    \t\t\tJSONUtil.json2Map(jsonParams): new HashMap<String, Object>();\t\n    \tMap<String, Object> responseMap = new HashMap<String, Object>(); \t\n          \n        responseMap = commDataHandleService.executeUpdate(paramMap);     \n    \tresponseJson(response, responseMap);\n    }\n    \n\n```\n\n\n### 二:service层\nICommDataHandleService:\n```java\n\n...\nimport java.util.Map;\n\n\n\n/**\n * 〈一句话功能简述〉<br> \n * 〈公共数据处理服务类〉\n *\n * @author \n * @see [相关类/方法]（可选）\n * @since [产品/模块版本] （可选）\n */\npublic interface ICommDataHandleService {\n\t\n\t/**\n\t * \n\t * 功能描述: <br>\n\t * 〈单体|批量查询〉\n\t *\n\t * @see [相关类/方法](可选)\n\t * @since [产品/模块版本](可选)\n\t */\n\tMap<String, Object> executeQuery(Map<String, Object> operateMap);\n\t\n\t/**\n     * \n     * 功能描述: <br>\n     * 〈单体|批量查询〉\n     *\n     * @see [相关类/方法](可选)\n     * @since [产品/模块版本](可选)\n     */\n    Map<String, Object> executeQuery(String jsonParam);\n\n\t/**\n\t *\n\t * 功能描述: <br>\n\t * 〈通用单表或批量查询,返回结果数及结果列表〉\n\t * @param statement mybatis命名空间+SQL编号\n\t * @param paramMap 查询参数条件\n\t * @see [相关类/方法](可选)\n\t * @since [产品/模块版本](可选)\n\t */\n\tMap<String, Object> executeMyBatisQuery(String statement, Map<String, Object> paramMap);\n\t/**\n\t * \n\t * 功能描述: <br>\n\t * 〈单体|批量更新〉\n\t *\n\t * @see [相关类/方法](可选)\n\t * @since [产品/模块版本](可选)\n\t */\n\tMap<String, Object> executeUpdate(Map<String, Object> operateMap);\n\t\n\t   /**\n     * \n     * 功能描述: <br>\n     * 〈单体|批量更新〉\n     *\n     * @see [相关类/方法](可选)\n     * @since [产品/模块版本](可选)\n     */\n    Map<String, Object> executeUpdate(String jsonParam);\n\n\t/**\n\t *\n\t * 功能描述: <br>\n\t * 〈通用MyBatis单表或批量插入,返回结果〉\n\t * @param statement mybatis命名空间+SQL编号\n\t * @param paramMap 查询参数条件\n\t * @see [相关类/方法](可选)\n\t * @since [产品/模块版本](可选)\n\t */\n\tMap<String, Object> executeMyBatisInsert(String statement, Map<String, Object> paramMap);\n\n\n\t/**\n\t *\n\t * 功能描述: <br>\n\t * 〈通用MyBatis单表或批量修改,返回结果〉\n\t * @param statement mybatis命名空间+SQL编号\n\t * @param paramMap 查询参数条件\n\t * @see [相关类/方法](可选)\n\t * @since [产品/模块版本](可选)\n\t */\n\t Map<String, Object> executeMyBatisUpdate(String statement, Map<String, Object> paramMap);\n\n\t/**\n\t *\n\t * 功能描述: <br>\n\t * 〈通用MyBatis单表或批量删除,返回结果〉\n\t * @param statement mybatis命名空间+SQL编号\n\t * @param paramMap 查询参数条件\n\t * @see [相关类/方法](可选)\n\t * @since [产品/模块版本](可选)\n\t */\n\t Map<String, Object> executeMyBatisDelete(String statement, Map<String, Object> paramMap);\n}\n\t\n\n\n```\n\nCommDataHandleServiceImpl：\n```java\n\n...\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.math.BigDecimal;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/**\n * 〈一句话功能简述〉<br> \n * 〈公共数据处理服务类〉\n *\n * @author \n * @see [相关类/方法]（可选）\n * @since [产品/模块版本] （可选）\n */\n@Service\npublic class CommDataHandleServiceImpl implements ICommDataHandleService {\n\t/**\n     * 日志打印\n     */\n    private static final Logger logger = LoggerFactory.getLogger(CommDataHandleServiceImpl.class);\n    public static final String T_TYPE_TABLLE = \"T\";      //表\n    public static final String T_TYPE_VIEW = \"V\";        //视图\n    public static final String T_TYPE_MYBATIS = \"M\";     //mybatis\n    public static final String T_TYPE_SQL = \"S\";         //SQL\n    public static final String O_TYPE_INSERT = \"I\";      //新增\n    public static final String O_TYPE_DELETE = \"D\";      //删除\n    public static final String O_TYPE_UPDATE = \"U\";      //更新\n    public static final String O_TYPE_SELECT = \"S\";      //查询\n    public static final String O_TYPE_COUNT = \"C\";       //统计\n    public static final String SUCCESS_FLAG = \"S\";       //成功标识\n    public static final String FAIL_FLAG = \"F\";          //失败标识\n    public static final String SUCCESS_MESSAGE = \"成功\";  //成功消息\n    public static final String FAIL_MESSAGE = \"失败\";     //失败消息\n\n\n    public enum  FieldType { INVALID, REGEN, REGENERATING, GENERATE, GENERATING, GENERATING_INITIAL, VALID, ERROR, ERROR_INITIAL, SET }\n    @Autowired\n    private ICommDataHandleDao commDataHandleDao;\n\n\t/**\n\t * \n\t * 功能描述: <br>\n     * 〈通用单表或批量查询,返回结果数及结果列表〉\n\t *  输入输出参数: 参考字符串jsonParam重构方法\n\t * @see [相关类/方法](可选)\n\t * @since [产品/模块版本](可选)\n\t */\n\t@Override\n\tpublic Map<String, Object> executeQuery(Map<String, Object> paramMap) {\t\n\t    logger.debug(\"executeQuery paramMap{}\", paramMap);\n\t    Map<String, Object> returnResultMap = new HashMap<String, Object>(); \n\t    //判断是否为批量查询\n        if(UtilValidate.isNotEmpty(paramMap.get(\"olist\"))){\n            returnResultMap = executeBatchQuery((List<Map<String, Object>>)paramMap.get(\"olist\"));\n        }else{\n            returnResultMap = executeSingleQuery((Map<String, Object>)paramMap.get(\"odata\"));\n        }\n        logger.debug(\"executeQuery returnResultMapc{}\", returnResultMap);\n        return returnResultMap;\n\t}\n\t\n\t/**\n     * \n     * 功能描述: <br>\n     * 〈通用单表或批量查询,返回结果数及结果列表〉\n     * 数据格式:\n     * 输入参数:rid：预留字段，暂且可不填;odata为操作实体;tname：为操作的表名或mybatis的sql编号;ttype：表类型, M：mybatis,S：SQL,T：Table,V:View\n     *        otype:操作类型 I:插入 S：查询  U：更新 D:删除 C:统计    tdata：查询条件键值对, 键前可通过[]定义数据类型,类型有:\n     *        I:Integer类型,TS:Timestamp类型,T:Date类型,D:Double类型,L:LONG类型;BD:BigDecimal类型,LS:Arrays类型\n     * 单表查询参数如: {\"rid\":\"10001\",\"odata\":{\"tname\":\"repayment.schedule.queryDueLoanPlanListForParams\",\n     *              \"ttype\":\"M\",\"otype\":\"S\",\"tdata\":{\"[T]repayInteDate\":\"2018-05-26\"}}}\n     * 多表查询参数如: {\"rid\":\"10001\",\"olist\":[\n     *  {\"tname\":\"repayment.schedule.queryDueLoanPlanListForParams\",\"ttype\":\"M\",\"otype\":\"S\",\"tdata\":{\"[T]repayInteDate\":\"2018-05-26\"}},\n     *  {\"tname\":\"admin.loan.main.queryLoanMainByLoanNo\",\"ttype\":\"M\",\"otype\":\"S\",\"tdata\":{\"loanNo\":\"PFD20170616000387\"}},\n     *  {\"tname\":\"admin.loan.main.queryLoanMainByFlowId\",\"ttype\":\"M\",\"otype\":\"S\",\"tdata\":{\"flowId\":\"ecps20170620000009974\"}}\n     *  ]}; \n     *                   \n     * 输出参数: flag: S 成功; F 失败; data:结果集列表(包括结果数，结果列表) msg: 成功,失败\n     * 返回结果如:\n     *      {\"flag\":\"S\",\"data\":{\"repayment.schedule.queryDueLoanPlanListForParamsTotalNum\":4,\n     *      \"repayment.schedule.queryDueLoanPlanListForParamsDataList\":[{\"acctFlag\":\"\",\"acctNo\":\"JYD180920000384\",\"balance\":460.36}]}};   \n     *   \n     * @see [相关类/方法](可选)\n     * @since [产品/模块版本](可选)\n     */\n    @Override\n    public Map<String, Object> executeQuery(String jsonParam) { \n        Map<String, Object> paramMap = UtilValidate.isNotEmpty(jsonParam) ? \n                JSONUtil.json2Map(jsonParam): new HashMap<String, Object>(); \n        return executeQuery(paramMap);         \n    }\n\n    /**\n     *\n     * 功能描述: <br>\n     * 〈通用单表或批量查询,返回结果数及结果列表〉\n     * @param statement mybatis命名空间+SQL编号\n     * @param paramMap 查询参数条件\n     * @see [相关类/方法](可选)\n     * @since [产品/模块版本](可选)\n     */\n    @Override\n    public Map<String, Object> executeMyBatisQuery(String statement, Map<String, Object> paramMap) {\n        String paramMapJson = JSONUtil.bean2Json(paramMap).toString();\n        String templateJson = \"{\\\"rid\\\":\\\"10001\\\",\\\"odata\\\":{\\\"tname\\\":\\\"\" + statement + \"\"\n                + \"\\\",\\\"ttype\\\":\\\"M\\\",\\\"otype\\\":\\\"S\\\",\\\"tdata\\\":\" + paramMapJson + \"}}\";\n        Map<String, Object> templateJsonParamMap = JSONUtil.json2Map(templateJson);\n        return executeQuery(templateJsonParamMap);\n    }\n        /**\n         *\n         * 功能描述: <br>\n         * 〈通用单表或批量更新,返回结果〉\n         *  输入输出参数: 参考字符串jsonParam重构方法\n         * @see [相关类/方法](可选)\n         * @since [产品/模块版本](可选)\n         */\n\t@Override\n\tpublic Map<String, Object> executeUpdate(Map<String, Object> paramMap) {\n\t     logger.debug(\"executeUpdate paramMap{}\", paramMap);\n\t     Map<String, Object> returnResultMap = new HashMap<String, Object>(); \n\t     //判断是否为批量更新\n\t     if(UtilValidate.isNotEmpty(paramMap.get(\"olist\"))){\n            returnResultMap = executeBatchUpdate((List<Map<String, Object>>)paramMap.get(\"olist\"));\n         }else{\n            returnResultMap = executeSingleUpdate((Map<String, Object>)paramMap.get(\"odata\"));\n         }\n\t     logger.debug(\"executeUpdate returnResultMapc{}\", returnResultMap);\n         return returnResultMap;\n\t}\n\t\n\t/**\n     * \n     * 功能描述: <br>\n     * 〈通用单表或批量更新,返回结果〉\n     * 数据格式:\n     * 输入参数:\n     * 新增:  {\"rid\":\"10001\",\"odata\":{\"tname\":\"system.activiti.insertComment\",\"ttype\":\"M\",\"otype\":\"I\",\n     * \"tdata\":{\"actCommentId\":\"888888\",\"content\":\"888888\",\"status\":\"2\"}}}\n     * \n     * 修改:  {\"rid\":\"10001\",\"odata\":{\"tname\":\"system.activiti.updateComment\",\"ttype\":\"M\",\"otype\":\"U\",\n     * \"tdata\":{\"actCommentId\":\"888888\",\"content\":\"888888\",\"status\":\"2\"}}}\n     * \n     * 删除:  {\"rid\":\"10001\",\"odata\":{\"tname\":\"system.activiti.updateComment\",\"ttype\":\"M\",\"otype\":\"D\",\n     * \"tdata\":{\"actCommentId\":\"888888\",\"content\":\"888888\",\"status\":\"2\"}}} \n     * \n     * 输出参数: flag: S(成功); F(失败); data:结果集列表(包括结果数) msg: 成功,失败\n     * 返回结果如:\n     *    {\"flag\":\"S\",\"data\":{\"system.activiti.insertCommentTotalNum\":1}\n     * @see [相关类/方法](可选)\n     * @since [产品/模块版本](可选)\n     */\n    @Override\n    public Map<String, Object> executeUpdate(String jsonParam) {\n        Map<String, Object> paramMap = UtilValidate.isNotEmpty(jsonParam) ? \n                JSONUtil.json2Map(jsonParam): new HashMap<String, Object>(); \n        return executeUpdate(paramMap);\n    }\n\n    /**\n     *\n     * 功能描述: <br>\n     * 〈通用MyBatis单表或批量插入,返回结果〉\n     * @param statement mybatis命名空间+SQL编号\n     * @param paramMap 查询参数条件\n     * @see [相关类/方法](可选)\n     * @since [产品/模块版本](可选)\n     */\n    @Override\n    public Map<String, Object> executeMyBatisInsert(String statement, Map<String, Object> paramMap) {\n        String paramMapJson = JSONUtil.bean2Json(paramMap).toString();\n        String templateJson = \"{\\\"rid\\\":\\\"10001\\\",\\\"odata\\\":{\\\"tname\\\":\\\"\" + statement + \"\"\n                + \"\\\",\\\"ttype\\\":\\\"M\\\",\\\"otype\\\":\\\"I\\\",\\\"tdata\\\":\" + paramMapJson + \"}}\";\n        Map<String, Object> templateJsonParamMap = JSONUtil.json2Map(templateJson);\n        return executeUpdate(templateJsonParamMap);\n    }\n\n    /**\n     *\n     * 功能描述: <br>\n     * 〈通用MyBatis单表或批量修改,返回结果〉\n     * @param statement mybatis命名空间+SQL编号\n     * @param paramMap 查询参数条件\n     * @see [相关类/方法](可选)\n     * @since [产品/模块版本](可选)\n     */\n    @Override\n    public Map<String, Object> executeMyBatisUpdate(String statement, Map<String, Object> paramMap) {\n        String paramMapJson = JSONUtil.bean2Json(paramMap).toString();\n        String templateJson = \"{\\\"rid\\\":\\\"10001\\\",\\\"odata\\\":{\\\"tname\\\":\\\"\" + statement + \"\"\n                + \"\\\",\\\"ttype\\\":\\\"M\\\",\\\"otype\\\":\\\"U\\\",\\\"tdata\\\":\" + paramMapJson + \"}}\";\n        Map<String, Object> templateJsonParamMap = JSONUtil.json2Map(templateJson);\n        return executeUpdate(templateJsonParamMap);\n    }\n\n    /**\n     *\n     * 功能描述: <br>\n     * 〈通用MyBatis单表或批量删除,返回结果〉\n     * @param statement mybatis命名空间+SQL编号\n     * @param paramMap 查询参数条件\n     * @see [相关类/方法](可选)\n     * @since [产品/模块版本](可选)\n     */\n    @Override\n    public Map<String, Object> executeMyBatisDelete(String statement, Map<String, Object> paramMap) {\n        String paramMapJson = JSONUtil.bean2Json(paramMap).toString();\n        String templateJson = \"{\\\"rid\\\":\\\"10001\\\",\\\"odata\\\":{\\\"tname\\\":\\\"\" + statement + \"\"\n                + \"\\\",\\\"ttype\\\":\\\"M\\\",\\\"otype\\\":\\\"D\\\",\\\"tdata\\\":\" + paramMapJson + \"}}\";\n        Map<String, Object> templateJsonParamMap = JSONUtil.json2Map(templateJson);\n        return executeUpdate(templateJsonParamMap);\n    }\n\n\t/**\n     * \n     * 功能描述: <br>\n     * 〈单表查询〉\n     *\n     * @see [相关类/方法](可选)\n     * @since [产品/模块版本](可选)\n     */\n    private Map<String, Object> executeSingleQuery(Map<String, Object> operateMap) {\n        Map<String, Object> returnResultMap = new HashMap<String, Object>(); \n        Map<String, String> typeMap = new HashMap<String, String>();\n        Map<String, Object> resultFieldMap = new HashMap<String, Object>();     //解析字段类型结果Map\n        Map<String, Object> originFieldMap = UtilValidate.isNotEmpty(operateMap.get(\"tdata\")) ?\n                JSONUtil.json2Map(String.valueOf(operateMap.get(\"tdata\"))) : new HashMap<String, Object>();\n        String tname = String.valueOf(operateMap.get(\"tname\"));\n        //如果查询类型为空，默认为MyBatis方式\n        if(UtilValidate.isEmpty(operateMap.get(\"ttype\")))  operateMap.put(\"ttype\", \"M\");\n        //如果操作类型为空，默认为查询\n        if(UtilValidate.isEmpty(operateMap.get(\"otype\")))  operateMap.put(\"otype\", \"S\");\n        \n        if(UtilValidate.isEmpty(operateMap.get(\"tname\")) || UtilValidate.isEmpty(originFieldMap)){\n            returnResultMap.put(\"flag\", FAIL_FLAG);\n            returnResultMap.put(\"msg\", \"必填参数为空\"); \n            returnResultMap.put(\"data\", \"\");  \n            return returnResultMap;\n        }\n        //如果为查询mybatis,查询表\n        if(T_TYPE_MYBATIS.equals(operateMap.get(\"ttype\")) || T_TYPE_TABLLE.equals(operateMap.get(\"ttype\"))){\n            for (Map.Entry<String, Object> entry : originFieldMap.entrySet()) {\n                typeMap = splitCharTypeAndContent(entry.getKey());//将字符串分开成类型和字段名\n                resultFieldMap.put(typeMap.get(\"content\"), conversionFieldType(typeMap.get(\"fieldType\"), String.valueOf(entry.getValue())));\n             }\n        }\n        //如果操作类型为查询统计则按统计查询，否则按列表查询\n        return (O_TYPE_COUNT.equals(operateMap.get(\"otype\"))) ? commDataHandleDao.executeCount(tname, resultFieldMap) \n                : commDataHandleDao.executeQuery(tname, resultFieldMap);\n    }\n    \n    /**\n     * \n     * 功能描述: <br>\n     * 〈单表修改〉\n     *\n     * @see [相关类/方法](可选)\n     * @since [产品/模块版本](可选)\n     */\n    private Map<String, Object> executeSingleUpdate(Map<String, Object> operateMap) {\n         Map<String, Object> returnResultMap = new HashMap<String, Object>(); \n         //如果更新类型为空，默认为MyBatis方式\n         if(UtilValidate.isEmpty(operateMap.get(\"ttype\")))  operateMap.put(\"ttype\", \"M\");\n         //如果操作类型为空，默认为添加\n         if(UtilValidate.isEmpty(operateMap.get(\"otype\")))  operateMap.put(\"otype\", \"I\");\n         if(UtilValidate.isEmpty(operateMap.get(\"tname\")) || UtilValidate.isEmpty(operateMap.get(\"tdata\"))\n                 || UtilValidate.isEmpty(JSONUtil.json2Map(String.valueOf(operateMap.get(\"tdata\"))))){\n             returnResultMap.put(\"flag\", FAIL_FLAG);\n             returnResultMap.put(\"msg\", \"必填参数为空\"); \n             returnResultMap.put(\"data\", \"\");  \n             return returnResultMap;\n         }\n \n         //如果操作类型为创建\n         if(O_TYPE_INSERT.equals(operateMap.get(\"otype\"))){\n             returnResultMap = commDataHandleDao.executeInsert(operateMap);\n             //如果操作类型为删除\n         }else if(O_TYPE_DELETE.equals(operateMap.get(\"otype\"))){\n             returnResultMap = commDataHandleDao.executeDelete(operateMap);\n             //如果操作类型为更新\n         }else if(O_TYPE_UPDATE.equals(operateMap.get(\"otype\"))){\n             returnResultMap = commDataHandleDao.executeUpdate(operateMap);    \n         }\n         return returnResultMap;\n    }\n\t\n\t/**\n\t * \n\t * 功能描述: <br>\n\t * 〈批量查询〉\n\t *\n\t * @see [相关类/方法](可选)\n\t * @since [产品/模块版本](可选)\n\t */\n\t@Transactional(readOnly = true)\n\tprivate Map<String, Object> executeBatchQuery(List<Map<String, Object>> operateList) {\n\t\tMap<String, Object> returnResultMap = new HashMap<String, Object>(); \n\t  \tMap<String, Object> executeResultMap = new HashMap<String, Object>(); \n\t  \tMap<String, Object> resultMap = new HashMap<String, Object>(); \n\t  \tboolean isSuccess = true;\n\t  \ttry{\n\t  \t    for(Map<String, Object> operateMap : operateList){\n              if(UtilValidate.isEmpty(operateMap.get(\"tname\")) || UtilValidate.isEmpty(operateMap.get(\"tdata\"))\n                      || (UtilValidate.isEmpty(JSONUtil.json2Map(String.valueOf(operateMap.get(\"tdata\")))))){\n                  isSuccess = false;\n                  returnResultMap.put(\"flag\", FAIL_FLAG);\n                  returnResultMap.put(\"msg\", \"必填参数为空\");\n                  returnResultMap.put(\"data\", \"\");\n                  return returnResultMap;\n              }\n            }\n\t\t\tfor(Map<String, Object> operateMap : operateList){\n\t\t        resultMap = executeSingleQuery(operateMap);\n\t\t        if(FAIL_FLAG.equals(resultMap.get(\"flag\"))){\n                    isSuccess = false;\n                    returnResultMap.put(\"flag\", FAIL_FLAG);\n                    returnResultMap.put(\"msg\", \"[\"+operateMap.get(\"tname\")+\"]\"+resultMap.get(\"msg\"));\n                    returnResultMap.put(\"data\", \"\");\n                    break;\n                }       \n\t\t\t\n\t\t        //如果查询多个结果集,则返回的数据以查询实体名+\"TotalNum\",实体名+\"DataList\"返回\n\t\t        if(operateList.size()>1){\n\t\t        \texecuteResultMap.put(operateMap.get(\"tname\")+\"TotalNum\", \n\t\t        \t        ((Map<String, Object>)resultMap.get(\"data\")).get(\"totalNum\"));\n\t\t        \texecuteResultMap.put(operateMap.get(\"tname\")+\"DataList\", \n\t\t        \t        ((Map<String, Object>)resultMap.get(\"data\")).get(\"dataList\"));\n\t\t        }else{\n\t\t        \texecuteResultMap.put(\"totalNum\", ((Map<String, Object>)resultMap.get(\"data\")).get(\"totalNum\"));\n\t\t            executeResultMap.put(\"dataList\", ((Map<String, Object>)resultMap.get(\"data\")).get(\"dataList\"));\n\t\t        }\n\t\t    }\n\t\t\tif(isSuccess){\n    \t        returnResultMap.put(\"flag\", SUCCESS_FLAG);\n                returnResultMap.put(\"msg\", SUCCESS_MESSAGE);\n                returnResultMap.put(\"data\", executeResultMap);   \n            }\n\t\t}catch (Exception e) {\n\t\t\tlogger.error(\"executeBatchQuery Exception{}\", e);\n\t        returnResultMap.put(\"flag\", FAIL_FLAG);\n\t        returnResultMap.put(\"msg\", e.getMessage());\n\t        returnResultMap.put(\"data\", \"\");   \n\t    }\n\t\treturn returnResultMap;\n\t}\n\t\n\t/**\n\t * \n\t * 功能描述: <br>\n\t * 〈批量修改〉\n\t *\n\t * @see [相关类/方法](可选)\n\t * @since [产品/模块版本](可选)\n\t */\n\tprivate Map<String, Object> executeBatchUpdate(List<Map<String, Object>> operateList) {\n\t\tMap<String, Object> returnResultMap = new HashMap<String, Object>(); \n\t  \tMap<String, Object> executeResultMap = new HashMap<String, Object>(); \n\t    Map<String, Object> resultMap = new HashMap<String, Object>(); \n        boolean isSuccess = true;\n\t  \ttry{\n            for(Map<String, Object> operateMap : operateList){\n                if(UtilValidate.isEmpty(operateMap.get(\"tname\")) || UtilValidate.isEmpty(operateMap.get(\"tdata\"))\n                        || (UtilValidate.isEmpty(JSONUtil.json2Map(String.valueOf(operateMap.get(\"tdata\")))))){\n                    isSuccess = false;\n                    returnResultMap.put(\"flag\", FAIL_FLAG);\n                    returnResultMap.put(\"msg\", \"必填参数为空\");\n                    returnResultMap.put(\"data\", \"\");\n                    return returnResultMap;\n                }\n            }\n\t  \t\tfor(Map<String, Object> operateMap : operateList){\n\t\t        resultMap = executeSingleUpdate(operateMap);\n\t\t        if(FAIL_FLAG.equals(resultMap.get(\"flag\"))){\n\t\t            isSuccess = false;\n\t\t            returnResultMap.put(\"flag\", FAIL_FLAG);\n                    returnResultMap.put(\"msg\", \"[\"+operateMap.get(\"tname\")+\"]\"+resultMap.get(\"msg\"));\n                    returnResultMap.put(\"data\", \"\");\n                    break;\n                }         \n                //如果查询多个结果集,则返回的数据以查询实体名+\"TotalNum\",实体名+\"DataList\"返回\n                if(operateList.size()>1){\n                    executeResultMap.put(operateMap.get(\"tname\")+\"Data\", \n                            ((Map<String, Object>)resultMap.get(\"data\")));\n                }else{\n                    executeResultMap = (Map<String, Object>)resultMap.get(\"data\");\n                }\n\t\t    }\n\t\t\tif(isSuccess){\n\t\t\t    returnResultMap.put(\"flag\", SUCCESS_FLAG);\n\t            returnResultMap.put(\"msg\", SUCCESS_MESSAGE);\n\t            returnResultMap.put(\"data\", executeResultMap);   \n\t\t\t}  \n\t\t}catch (Exception e) {\n\t\t\tlogger.error(\"executeBatchUpdate Exception{}\", e);\n\t        returnResultMap.put(\"flag\", FAIL_FLAG);\n\t        returnResultMap.put(\"msg\", e.getMessage());\n\t        returnResultMap.put(\"data\", \"\");   \n\t    }\n\t\treturn returnResultMap;\n\t}\n\t\n\t/**\n     * 根据类型,将字符值转化成相对类型\n     * @param fieldType\n     * @param fieldValue\n     * @return\n     */\n\tprivate static Object conversionFieldType(String fieldType, String fieldValue){\n        if(\"I\".equals(fieldType)){\n            return Integer.parseInt(fieldValue);\n        }else if(\"TS\".equals(fieldType)){                   //Timestamp类型\n            return java.sql.Timestamp.valueOf(fieldValue);\n        }else if(\"D\".equals(fieldType)){                   //Double\n            return Double.valueOf(fieldValue);\n        }else if(\"DT\".equals(fieldType)){\n            return Integer.parseInt(fieldType);\n        }else if(\"T\".equals(fieldType)){\n            return fieldType.length() > 10 ? DateUtil.getDateOfLongStr(fieldValue) : DateUtil.getDateOfStr(fieldValue);\n        }else if(\"L\".equals(fieldType)){\n            return Long.valueOf(fieldValue);\n        }else if(\"BD\".equals(fieldType)){\n            return BigDecimal.valueOf(Double.valueOf(fieldValue));\n        }else if(\"LS\".equals(fieldType)){\n            return Arrays.asList(fieldValue.split(\",\"));\n        }\n\n        return fieldValue;\n    }\n    \n    /**\n     * 分割[W]*类型的字符串,返回字符类型,操作符类型及值map\n     * 断字符串是否含有\"[W]\"格式的字符,有则返回字符类型及值map\n     * @param param\n     * @return Map:  type,content\n     */\n    private static Map<String, String> splitCharTypeAndContent(String param){\n        //解析字符串中字段类型\n        Pattern fieldPattern = Pattern.compile(\"\\\\[[A-Z]+\\\\]\");\n        Matcher fieldMatcher = fieldPattern.matcher(param);\n        String fieldType = \"\";\n        String content = \"\";\n        Map<String, String> result = new HashMap<String, String>();\n        while(fieldMatcher.find()){\n            fieldType = fieldMatcher.group();\n        }\n        //如存在[*]*的字符\n        if(UtilValidate.isNotEmpty(fieldType)) {\n            content = param.replaceFirst(\"\\\\[[A-Z]+\\\\]\", \"\");\n            fieldType = fieldType.replace(\"[\",\"\").replace(\"]\",\"\");\n        }else{\n            content = param;\n            fieldType = \"S\"; //如果不存在,则补上默认字符类型\n        }\n        result.put(\"fieldType\", fieldType);\n\n\n        //解析字符串中操作符类型\n        Pattern operatorPattern = Pattern.compile(\"\\\\[[^0-9a-zA-Z]+\\\\]\");\n        Matcher operatorMatcher = operatorPattern.matcher(content);\n        String operatorType = \"\";\n        while(operatorMatcher.find()){\n            operatorType = operatorMatcher.group();\n        }\n        //System.out.println(\"=======param.replaceFirst1===\"+content.replaceFirst(\"\\\\[[^\\\\w]+\\\\]\", \"\"));\n        //System.out.println(\"=======param.replaceFirst2===\"+content.replaceFirst(\"\\\\[[^0-9a-zA-Z]+\\\\]\", \"\"));\n        //如存在非大写字母的字符\n        if(UtilValidate.isNotEmpty(operatorType)) {\n            content = content.replaceFirst(\"\\\\[[^\\\\w]+\\\\]\", \"\");\n            operatorType = operatorType.replace(\"[\",\"\").replace(\"]\",\"\");\n        }else{\n            operatorType = \"=\"; //如果不存在,则补上默认字符类型\n        }\n\n        result.put(\"operatorType\", operatorType);\n        result.put(\"content\", content);\n        return result;\n    }\n}\n\n\n```\n\n### 一:dao层\nICommDataHandleDao:\n```java\n...\n\n/**\n * 〈一句话功能简述〉<br> \n * 〈公共数据处理服务类〉\n *\n * @author \n * @see [相关类/方法]（可选）\n * @since [产品/模块版本] （可选）\n */\npublic interface ICommDataHandleDao {\n\t\n\t/**\n\t * \n\t * 功能描述: <br>\n\t * 〈增加〉\n\t *\n\t * @see [相关类/方法](可选)\n\t * @since [产品/模块版本](可选)\n\t */\n    Map<String, Object> executeInsert(Map<String, Object> operateMap);\n\t\n\t/**\n\t * \n\t * 功能描述: <br>\n\t * 〈删除〉\n\t *\n\t * @see [相关类/方法](可选)\n\t * @since [产品/模块版本](可选)\n\t */\n\tMap<String, Object> executeDelete(Map<String, Object> operateMap);\n\t\n\t/**\n\t * \n\t * 功能描述: <br>\n\t * 〈查询〉\n\t *\n\t * @see [相关类/方法](可选)\n\t * @since [产品/模块版本](可选)\n\t */\n\tMap<String, Object> executeQuery(String tname, Map<String, Object> fieldMap);\n\t\n\t/**\n     * \n     * 功能描述: <br>\n     * 〈统计〉\n     *\n     * @see [相关类/方法](可选)\n     * @since [产品/模块版本](可选)\n     */\n    Map<String, Object> executeCount(String tname, Map<String, Object> fieldMap);\n\t\n\t\n\t/**\n\t * \n\t * 功能描述: <br>\n\t * 〈更新〉\n\t *\n\t * @see [相关类/方法](可选)\n\t * @since [产品/模块版本](可选)\n\t */\n\tMap<String, Object> executeUpdate(Map<String, Object> operateMap);\n\t\n\n}\n\n\n```\n\nCommDataHandleDaoImpl:\n```java\n\n...\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.apache.commons.beanutils.BeanUtils;\n/**\n * 〈一句话功能简述〉<br> \n * 〈公共数据处理服务类〉\n *\n * @author \n * @see [相关类/方法]（可选）\n * @since [产品/模块版本] （可选）\n */\n@Repository\npublic class CommDataHandleDaoImpl extends AbstractDaoSupport implements ICommDataHandleDao{\n    /**\n     * 日志.\n     */\n    private static final Logger logger = LoggerFactory.getLogger(CommDataHandleDaoImpl.class);\n    public static final String SUCCESS_FLAG = \"S\";        //成功标识\n    public static final String FAIL_FLAG = \"F\";           //失败标识\n    public static final String SUCCESS_MESSAGE = \"成功\";   //成功消息\n    public static final String FAIL_MESSAGE = \"失败\";      //失败消息\n    \n    /**\n\t * \n\t * 功能描述: <br>\n\t * 〈添加〉\n\t *\n\t * @see [相关类/方法](可选)\n\t * @since [产品/模块版本](可选)\n\t */\n\t@Override\n\tpublic Map<String, Object> executeInsert(Map<String, Object> operateMap) {\n\t\tlogger.debug(\"executeInsert operateMap{}\", operateMap);\n\t\tMap<String, Object> resultMap = new HashMap<String, Object>();\n\t\tMap<String, Object> insertMap = new HashMap<String, Object>();\n\t\tint rowCount = 0;\n\t\tObject parameter = null;//添加参数\n\t\tparameter = getStatementParameter(String.valueOf(operateMap.get(\"tname\")), (Map)operateMap.get(\"tdata\"));\n\t    rowCount = getSqlSession().insert(String.valueOf(operateMap.get(\"tname\")), operateMap.get(\"tdata\"));\n\t    insertMap.put(\"rowCount\", rowCount);    \n\t    \n\t    resultMap.put(\"flag\", rowCount > 0 ? SUCCESS_FLAG : FAIL_FLAG);\n\t    resultMap.put(\"msg\", rowCount > 0 ? SUCCESS_MESSAGE : FAIL_MESSAGE); \n\t    resultMap.put(\"data\", insertMap);  \n\t    \n\t\tlogger.debug(\"executeInsert resultMap{}\", resultMap);\n\t\treturn resultMap;\n\t}\n\n\t/**\n\t * \n\t * 功能描述: <br>\n\t * 〈删除〉\n\t *\n\t * @see [相关类/方法](可选)\n\t * @since [产品/模块版本](可选)\n\t */\n\t@Override\n\tpublic Map<String, Object> executeDelete(Map<String, Object> operateMap) {\n\t\tlogger.debug(\"executeDelete operateMap{}\", operateMap);\n\t\t\n\t\tMap<String, Object> resultMap = new HashMap<String, Object>();\n\t    Map<String, Object> deleteMap = new HashMap<String, Object>();\n\t\tint rowCount = 0;\n\t\tObject parameter = null;//删除参数\n\t\t/**\n\t    MappedStatement mappedStatement = getSqlSession().getConfiguration().getMappedStatement(String.valueOf(operateMap.get(\"tname\")));\n        //当参数类型为空且不为Map(即自定义类型)时,将Map数据转化成相应的实体类数据\n        if(mappedStatement != null && !mappedStatement.getParameterMap().getType().getSimpleName().contains(\"Map\")){  \n            try {\n                parameter = mappedStatement.getParameterMap().getType().newInstance();\n            } catch (InstantiationException | IllegalAccessException e) {\n                logger.error(\"getType.newInstance:\"+e.getMessage()); \n            }\n            try {\n                BeanUtils.populate(parameter, (Map) operateMap.get(\"tdata\"));\n            } catch (IllegalAccessException | InvocationTargetException e) {\n                logger.error(\"BeanUtils.populate:\"+e.getMessage()); \n            }  \n        }else{\n            parameter = operateMap.get(\"tdata\");\n        }\n        */\n        parameter = getStatementParameter(String.valueOf(operateMap.get(\"tname\")), (Map)operateMap.get(\"tdata\"));\n\t    rowCount = getSqlSession().delete(String.valueOf(operateMap.get(\"tname\")), parameter);\n\t\tdeleteMap.put(\"rowCount\", rowCount);\n\t\t\n\t\tresultMap.put(\"flag\", rowCount > 0 ? SUCCESS_FLAG : FAIL_FLAG);\n\t    resultMap.put(\"msg\", rowCount > 0 ? SUCCESS_MESSAGE : FAIL_MESSAGE); \n\t    resultMap.put(\"data\", deleteMap);  \n\t    \n\t\tlogger.debug(\"executeDelete resultMap{}\", resultMap);\n\t\treturn resultMap;\n\t}\n\n\t/**\n\t * \n\t * 功能描述: <br>\n\t * 〈列表查询〉\n\t *tname:表名/mybatis sql编号\n\t * @see [相关类/方法](可选)\n\t * @since [产品/模块版本](可选)\n\t */\n\t@Override\n\tpublic Map<String, Object> executeQuery(String tname, Map<String, Object> fieldMap) {\n\t\t//logger.debug(\"executeQuery fieldMap{}\", fieldMap);\n\t\tMap<String, Object> resultMap = new HashMap<String, Object>();\n\t\tString viewIndex =  \"1\";//页数,如果没有设置当前页码，默认为1\n\t\tString viewSize = \"10\"; //条数,如果没有设置页面大小，则采用系统设置的默认大小（10条）\n        int totalNum = 0;       //总记录数\n        Object parameter = null;//查询参数  \n        Limit limit = new Limit();\n        limit.setPageSize(viewSize);\n        limit.setCurrentPage(viewIndex);\n        \n        //分页查询\n        if(UtilValidate.isNotEmpty(fieldMap)  && UtilValidate.isNotEmpty(fieldMap.get(\"viewIndex\")) \n        \t\t&& UtilValidate.isNotEmpty(fieldMap.get(\"viewSize\"))){\n            viewIndex = String.valueOf(fieldMap.get(\"viewIndex\"));\n            viewSize = String.valueOf(fieldMap.get(\"viewSize\"));\n            viewIndex = Integer.parseInt(viewIndex) < 1 ? \"1\" : viewIndex;\n            fieldMap.remove(\"viewIndex\");\n            fieldMap.remove(\"viewSize\");\n              \n\t\t    limit.setPageSize(viewSize);\n\t\t    limit.setCurrentPage(viewIndex); \n        }\n\n        parameter = getStatementParameter(tname, fieldMap);\n            \n        List<?> dataList = getSqlSession().selectPage(tname, parameter, limit);\n        totalNum = limit.getTotalRecords();\n\n        resultMap.put(\"flag\", SUCCESS_FLAG);\n        resultMap.put(\"msg\", SUCCESS_MESSAGE);\n\t\tresultMap.put(\"totalNum\", totalNum);\n\t\tresultMap.put(\"dataList\", dataList);\n\n\t\t//logger.debug(\"executeQuery resultMap{}\", resultMap);\n\t\treturn resultMap;\n\t}\n\t\n\t/**\n     * \n     * 功能描述: <br>\n     * 〈统计查询〉\n     *\n     * @see [相关类/方法](可选)\n     * @since [产品/模块版本](可选)\n     */\n    @Override\n\tpublic Map<String, Object> executeCount(String tname, Map<String, Object> fieldMap){\n        logger.debug(\"executeCount fieldMap{}\", fieldMap);\n        Map<String, Object> resultMap = new HashMap<String, Object>();\n        Object parameter = getStatementParameter(tname, fieldMap);//查询参数\n\n\t\tresultMap.put(\"totalNum\", getSqlSession().selectOne(tname, parameter));//记录数\n\t\tresultMap.put(\"flag\", SUCCESS_FLAG);\n\t\tresultMap.put(\"msg\", SUCCESS_MESSAGE);\n\n        logger.debug(\"executeCount resultMap{}\", resultMap);\n        return resultMap;\n    }\n\n\t/**\n\t * \n\t * 功能描述: <br>\n\t * 〈修改〉\n\t *\n\t * @see [相关类/方法](可选)\n\t * @since [产品/模块版本](可选)\n\t */\n\t@Override\n\tpublic Map<String, Object> executeUpdate(Map<String, Object> operateMap) {\n\t\tlogger.debug(\"executeUpdate operateMap{}\", operateMap);\n\t\tMap<String, Object> resultMap = new HashMap<String, Object>();\n\t\tMap<String, Object> countMap = new HashMap<String, Object>();\n\t\tint rowCount = 0;\n\t\tObject parameter = null;//修改参数\n        parameter = getStatementParameter(String.valueOf(operateMap.get(\"tname\")), (Map)operateMap.get(\"tdata\"));\n\t\trowCount = getSqlSession().update(String.valueOf(operateMap.get(\"tname\")), parameter);\n\t\tcountMap.put(\"rowCount\", rowCount);\n\t\t\n\t    resultMap.put(\"flag\", SUCCESS_FLAG);\n        resultMap.put(\"msg\", SUCCESS_MESSAGE); \n        resultMap.put(\"data\", countMap); \n\t\tlogger.debug(\"executeUpdate resultMap{}\", resultMap);\n\t\treturn resultMap;\n\t\t\n\t}\n\t\n\t/**\n\t * \n\t * 功能描述: <br>\n\t * 〈获取数据库操作参数〉\n\t *\n\t * @param tname\n\t * @param fieldMap\n\t * @return\n\t * @see [相关类/方法](可选)\n\t * @since [产品/模块版本](可选)\n\t */\n\tprivate Object getStatementParameter(String tname, Map<String, Object> parameterMap) {\n\t    Object parameter = null;//参数  \n\t    MappedStatement mappedStatement = getSqlSession().getConfiguration().getMappedStatement(tname);\n        //当参数类型为空且不为Map(即自定义类型)时,将Map数据转化成相应的实体类数据\n        if(mappedStatement != null && mappedStatement.getParameterMap().getType() != null\n                && !mappedStatement.getParameterMap().getType().getSimpleName().contains(\"Map\")){  \n            try {\n                parameter = mappedStatement.getParameterMap().getType().newInstance();\n            } catch (InstantiationException e) {\n                logger.error(\"getType.newInstance:\"+e.getMessage()); \n            } catch (IllegalAccessException e) {\n                logger.error(\"getType.newInstance:\"+e.getMessage()); \n            }\n            try {\n                BeanUtils.populate(parameter, parameterMap);\n            } catch (IllegalAccessException e) {\n                logger.error(\"BeanUtils.populate:\"+e.getMessage()); \n            } catch (InvocationTargetException e) {\n                logger.error(\"getType.newInstance:\"+e.getMessage()); \n            }  \n        }else{\n            parameter = parameterMap;\n        }\n        return parameter;\n\t}\n}\n\n\n```","tags":["mysql"]},{"title":"freemarker+spring+groovy+mysql动态查询","url":"%2F2019%2F04%2F29%2Ffreemarker-spring-groovy-mysql%E5%8A%A8%E6%80%81%E6%9F%A5%E8%AF%A2%2F","content":"\n# 为避免项目中众多的垒代码的CRUD功能,通过freemarker,spring,groovy,mysql实现页面动态查询功态\n<!--more-->\n### 一:pom.xml\n```xml\n...\n\t<dependency>\n\t\t<groupId>org.codehaus.groovy</groupId>\n\t\t<artifactId>groovy-all</artifactId>\n\t\t<version>2.1.3</version>\n\t</dependency>\n...\n\n```\n\n\n### 二:ftl页面\n```freemarker\n...\n<body>\n  ${pageContent!''}\n</body>\n...\n\n```\n\n### 三:controller层\n```java\n/**\n * Created by  on 2019/3/29.\n */\n@Controller\n@RequestMapping(\"/groovyhandle\")\npublic class GroovyScriptController extends BaseController{\n\n    /** Logger available to subclasses */\n    private static final Logger logger = LoggerFactory.getLogger(GroovyScriptController.class);\n    private Map<String, Object> scriptCache = new ConcurrentHashMap<String, Object>();\n    public static final String SUCCESS_FLAG = \"S\";        //成功标识\n    public static final String FAIL_FLAG = \"F\";           //失败标识\n\n    @Autowired\n    ICommDataHandleService commDataHandleService;\n\n    private Script getShellScript(String cacheKey, String script){\n       if(!scriptCache.containsKey(cacheKey)){\n           Script shell = new GroovyShell().parse(script);\n           scriptCache.put(cacheKey, shell);\n       }\n       return (Script)scriptCache.get(cacheKey);\n    }\n\n    private Binding getBinding(HttpServletRequest request){\n  ;     Binding binding = new Binding();\n        HttpSession session = request.getSession(true);\n        ApplicationContext appContext = WebApplicationContextUtils.getWebApplicationContext(session\n                .getServletContext());\n        Map<String, Object> beanMap = appContext.getBeansOfType(Object.class);\n        //遍历设置所有bean,可以根据需求在循环中对bean做过滤\n        for (String beanName : beanMap.keySet()) {\n            binding.setVariable(beanName, beanMap.get(beanName));\n        }\n        return binding;\n    }\n\n    @RequestMapping(\"/initPage.do\")\n    public ModelAndView initPage(HttpServletRequest request) {\n        String pageId = request.getParameter(\"pageId\");\n        logger.info(\"自定义初始化页面开始,pageId {}\", pageId);\n        ModelAndView mv = new ModelAndView();\n        if(UtilValidate.isEmpty(pageId)){\n            mv.addObject(\"message\", \"pageId不能为空\");\n            mv.setViewName(\"common/error_page\");\n            return mv;\n        }\n\n        String pageContent = \"\";                                          //页面内容\n        //根据页面编号查询系统自定义页面表\n        Map<String, Object> pageConditionParamMap = new HashMap<String, Object>();\n        pageConditionParamMap.put(\"pageId\", pageId);\n        Map<String, Object> pageConditionResponseMap = commDataHandleService.executeMyBatisQuery(\n                \"system.custompagelist.queryCustomPageById\", pageConditionParamMap);\n        //logger.debug(\"execute pageConditionResponseMap {}\", pageConditionResponseMap);\n        //查询自定义页面失败或记录为空\n        if(FAIL_FLAG.equals(pageConditionResponseMap.get(\"flag\")) || UtilValidate.isEmpty(pageConditionResponseMap.get(\"dataList\"))){\n            mv.addObject(\"message\", FAIL_FLAG.equals(pageConditionResponseMap.get(\"flag\")) ? pageConditionResponseMap.get(\"msg\") :\n                    \"查询记录为空\");\n            mv.setViewName(\"common/error_page\");\n            return mv;\n        }\n\n        CustomPageEntity customPageEntity = ((List<CustomPageEntity>)pageConditionResponseMap.get(\"dataList\")).get(0);\n        //logger.debug(\"execute customPageEntity {}\", customPageEntity);\n        if(UtilValidate.isEmpty(customPageEntity.getTemplateId())){\n            mv.addObject(\"message\", \"页面编号:\" + pageId + \",无模板配置\");\n            mv.setViewName(\"common/error_page\");\n            return mv;\n        }\n\n        //查询页面模板\n        Map<String, Object> templateParamMap = new HashMap<String, Object>();\n        templateParamMap.put(\"templateId\", customPageEntity.getTemplateId());\n        Map<String, Object> templateResponseMap = commDataHandleService.executeMyBatisQuery(\n                \"system.custompagelist.queryCustomTemplateById\", templateParamMap);\n        logger.debug(\"execute templateResponseMap {}\", templateResponseMap);\n        if(FAIL_FLAG.equals(templateResponseMap.get(\"flag\")) || UtilValidate.isEmpty(templateResponseMap.get(\"dataList\"))){\n            mv.addObject(\"message\", FAIL_FLAG.equals(templateResponseMap.get(\"flag\")) ? templateResponseMap.get(\"msg\") :\n                    \"无编号为:\" + customPageEntity.getTemplateId() + \"的模板数据\");\n            mv.setViewName(\"common/error_page\");\n            return mv;\n        }\n\n        //执行页面查询条件脚本\n        Map<String, Object> queryConditionResponseMap = runScript(customPageEntity.getQueryScript(), request);\n        logger.debug(\"execute queryConditionResponseMap {}\", queryConditionResponseMap);\n\n        CustomTemplateEntity customTemplateEntity = ((List<CustomTemplateEntity>)templateResponseMap.get(\"dataList\")).get(0);\n\n        //执行页面查询结果脚本\n        //Map<String, Object> resultResponseMap = runScript(customPageEntity.getActionScript(), request);\n        if(SUCCESS_FLAG.equals(queryConditionResponseMap.get(\"status\")) &&\n           UtilValidate.isNotEmpty(queryConditionResponseMap.get(\"result\"))){\n            pageContent = analysisTemplate(customTemplateEntity.getTemplateContent(),\n                    queryConditionResponseMap.get(\"result\"));\n        }\n        logger.debug(\"自定义初始化页面开始结束\");\n        mv.addObject(\"pageContent\", pageContent);\n        mv.setViewName(\"custompagelist/mainpage\");\n        return mv;\n    }\n\n    @RequestMapping(\"/queryPagingList.do\")\n    public void queryPagingList(HttpServletResponse response, HttpServletRequest request) {\n        String pageId = request.getParameter(\"pageId\");\n        String jsonParams = request.getParameter(\"jsonParams\");\n        logger.debug(\"queryPagingList pageId{}, jsonParams{}\", pageId, jsonParams);\n\n        //根据页面编号查询系统自定义页面表\n        Map<String, Object> pageConditionParamMap = new HashMap<String, Object>();\n        pageConditionParamMap.put(\"pageId\", pageId);\n        Map<String, Object> pageConditionResponseMap = commDataHandleService.executeMyBatisQuery(\n                \"system.custompagelist.queryCustomPageById\", pageConditionParamMap);\n        logger.debug(\"execute pageConditionResponseMap {}\", pageConditionResponseMap);\n\n        CustomPageEntity customPageEntity = ((List<CustomPageEntity>)pageConditionResponseMap.get(\"dataList\")).get(0);\n        //执行页面查询条件脚本\n        Map<String, Object> responseMap = runScript(customPageEntity.getQueryScript(), request);\n        logger.debug(\"queryPagingList responseMap {}\", responseMap);\n\n        responseJson(response, responseMap);\n    }\n\n\n    /**\n     * 运行groovy脚本\n     * @param scriptContent\n     * @return\n     */\n    private Map<String, Object> runScript( String scriptContent, HttpServletRequest request) {\n        logger.debug(\"execute scriptContent {}\", scriptContent);\n        Map<String, Object> returnResultMap = new HashMap<String, Object>();\n        Script shell = null;\n        try {\n            String cacheKey = MD5Util.getMD5Message(scriptContent);\n            logger.debug(\"execute cacheKey {}\", cacheKey);\n            shell = getShellScript(cacheKey, scriptContent);\n            Script scriptObject = InvokerHelper.createScript(shell.getClass(), getBinding(request));\n            scriptObject.setProperty(\"request\", request);\n            Object runResult = scriptObject.run();\n\n            returnResultMap.put(\"status\", SUCCESS_FLAG);\n            returnResultMap.put(\"result\", runResult);\n        } catch (Throwable t) {\n            returnResultMap.put(\"status\", FAIL_FLAG);\n            returnResultMap.put(\"result\", t.getMessage());\n            logger.error(\"groovy script execute error. script: \" + shell, t);\n        }\n\n        logger.debug(\"execute returnResultMap {}\", returnResultMap);\n        return returnResultMap;\n    }\n\n    /**\n     * 解析Freemarker模板\n     * @param templateContent  模板内容\n     * @param analysisParam    模板参数\n     * @return\n     */\n    private String analysisTemplate( String templateContent, Object analysisParam) {\n        logger.debug(\"analysisTemplate analysisParam {}\", analysisParam);\n        String analysisResult = \"\";\n        Configuration cfg = new Configuration();\n        StringTemplateLoader stringLoader = new StringTemplateLoader();\n        stringLoader.putTemplate(\"myTemplate\", templateContent);\n        cfg.setTemplateLoader(stringLoader);\n        cfg.setDefaultEncoding(\"UTF-8\");\n\n        try {\n            Template template = cfg.getTemplate(\"myTemplate\",\"utf-8\");\n            StringWriter writer = new StringWriter();\n            try {\n                template.process(analysisParam, writer);\n                analysisResult = writer.toString();\n            } catch (TemplateException e) {\n                e.printStackTrace();\n                logger.error(\"analysisTemplate TemplateException,: \" , e);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n            logger.error(\"analysisTemplate IOException,: \" , e);\n        }\n        logger.debug(\"analysisTemplate analysisResult: {}\", analysisResult);\n        return analysisResult;\n    }\n}\n```\n\n### 四:动态groovy脚本\n\n```dos\n...\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nLogger logger = LoggerFactory.getLogger(getClass());\nString pageId = request.getParameter(\"pageId\");\nlogger.debug(\"groovy pageId{}\", pageId);\nLoanMainAdminEntity loanMain = loanMainAdminService.getLoanMainByLoanNo(\"111111111\");\nMap<String, Object> returnMap = new HashMap<String, Object>();\nreturnMap.put(\"loanMain\", loanMain);\nreturnMap.put(\"pageId\", pageId);\nlogger.debug(\"loanMainAdminService.getLoanMainByLoanNo {}\", loanMain);\nreturn returnMap;\n\n```\n\n\n### 五:数据库sql脚本\n\n```sql\nDROP TABLE IF EXISTS `TB_SYSTEM_CUSTOM_TEMPLATE`;\nCREATE TABLE `TB_SYSTEM_CUSTOM_TEMPLATE` (\n  `TEMPLATE_ID` BIGINT(20) NOT NULL AUTO_INCREMENT,\n  `TEMPLATE_NAME` VARCHAR(20) DEFAULT NULL COMMENT '模板名称',\n  `TEMPLATE_TYPE` VARCHAR(20) DEFAULT NULL COMMENT '模板类型',\n  `TEMPLATE_CONTENT` VARCHAR(4000) DEFAULT NULL COMMENT '模板内容',\n  `TEMPLATE_DESC` VARCHAR(4000) DEFAULT NULL COMMENT '备注',\n  `CREATE_TIME` TIMESTAMP NOT NULL COMMENT '创建时间',\n  `UPDATE_TIME` TIMESTAMP NOT NULL COMMENT '更新时间',\n  PRIMARY KEY (`TEMPLATE_ID`),\n  KEY `INDEX_TEMPLATE_NAME` (`TEMPLATE_NAME`),\n  KEY `INDEX_TEMPLATE_CONTENT` (`TEMPLATE_CONTENT`)\n) ENGINE=INNODB AUTO_INCREMENT=0 DEFAULT CHARSET=UTF8 COMMENT='自定义模板表';\n\n\nDROP TABLE IF EXISTS `TB_SYSTEM_CUSTOM_PAGE`;\nCREATE TABLE `TB_SYSTEM_CUSTOM_PAGE` (\n  `PAGE_ID` BIGINT(20) NOT NULL AUTO_INCREMENT,\n  `MENU_NAME` VARCHAR(20) DEFAULT NULL COMMENT '菜单名称',\n  `MENU_CODE` VARCHAR(20) DEFAULT NULL COMMENT '菜单简码',\n  `MENU_URL` VARCHAR(200) DEFAULT NULL COMMENT '菜单地址',\n  `PAGE_TYPE` VARCHAR(20) DEFAULT NULL COMMENT '页面类型: QUERY_LARGE:大页面查询;QUERY_MIDDLE:中页面查询;QUERY_SMALL:小页面查询;QUERY_NO:无查询',\n  `TEMPLATE_ID` BIGINT(20) NOT NULL COMMENT '模板编号',\n  `QUERY_TYPE` VARCHAR(20) DEFAULT NULL COMMENT '查询类型 SQL:语句;CODE:脚本代码',\n  `QUERY_SCRIPT` VARCHAR(1000) DEFAULT NULL COMMENT '查询脚本',\n  `PAGE_SIZE` INT(8) DEFAULT NULL COMMENT '页面分页数',\n  `ACTION_TYPE` VARCHAR(20) DEFAULT NULL COMMENT '功能类型 SQL:语句;CODE:脚本代码',\n  `ACTION_SCRIPT` VARCHAR(1000) DEFAULT NULL COMMENT '功能脚本',\n  `TABLE_HEAD` VARCHAR(200) DEFAULT NULL COMMENT '表头字段,格式:编号,名称,编码',\n  `UPDATE_USER_CODE` VARCHAR(20) DEFAULT NULL COMMENT '更新用户代码',\n  `CREATE_TIME` TIMESTAMP NOT NULL COMMENT '创建时间',\n  `UPDATE_TIME` TIMESTAMP NOT NULL COMMENT '更新时间',\n  PRIMARY KEY (`PAGE_ID`),\n  KEY `INDEX_MENU_NAME` (`MENU_NAME`),\n  KEY `INDEX_MENU_CODE` (`MENU_CODE`)\n) ENGINE=INNODB AUTO_INCREMENT=0 DEFAULT CHARSET=UTF8 COMMENT='系统自定义页面表';\n\n```","tags":["groovy"]}]